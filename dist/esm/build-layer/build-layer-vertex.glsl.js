var main = "\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform float elevationScale;\nuniform float opacity;\n\n\nvarying vec4 vColor;\nvarying float isValid;\nvarying vec3 a_pos;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec3 positions64Low;\n  vec3 nextPositions64Low;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n";

var getVertex = function getVertex(type) {
  if (type === 'side') {
    return "        #define SHADER_NAME build-layer-vertex-shader-side\n\n        attribute vec3 instancePositions;\n        attribute vec3 nextPositions;\n        attribute vec3 instancePositions64Low;\n        attribute vec3 nextPositions64Low;\n        attribute float instanceElevations;\n        attribute vec4 instanceFillColors;\n        attribute vec3 instancePickingColors;\n\n        uniform vec2 gradient;\n        \n        ".concat(main, "\n\n        void calculatePosition(PolygonProps props) {\n          vec3 pos;\n          vec3 pos64Low;\n          vec3 normal;\n          vec4 colors = props.fillColors;\n        \n          geometry.worldPosition = props.positions;\n          geometry.worldPositionAlt = props.nextPositions;\n          geometry.pickingColor = props.pickingColors;\n        \n          pos = mix(props.positions, props.nextPositions, vertexPositions.x);\n          pos64Low = mix(props.positions64Low, props.nextPositions64Low, vertexPositions.x);\n          isValid = vertexValid;\n        \n          pos.z += props.elevations * vertexPositions.y * elevationScale;\n          normal = vec3(props.positions.y - props.nextPositions.y, props.nextPositions.x - props.positions.x, 0.0);\n          normal = project_offset_normal(normal);\n          geometry.normal = normal;\n          \n\n          gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);\n          DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n          float a = gradient.x + (gradient.y - gradient.x ) * vertexPositions.y;\n          vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, normal);\n          vColor = vec4(lightColor.rgb, a);\n\n          DECKGL_FILTER_COLOR(vColor, geometry);\n        }\n\n        void main(void) {\n          PolygonProps props;\n        \n          props.positions = instancePositions;\n          props.positions64Low = instancePositions64Low;\n          props.elevations = instanceElevations;\n          props.fillColors = instanceFillColors;\n          props.pickingColors = instancePickingColors;\n          props.nextPositions = nextPositions;\n          props.nextPositions64Low = nextPositions64Low;\n          \n          calculatePosition(props);\n        }\n      ");
  }

  return "\n          #define SHADER_NAME top-polygon-layer-vertex-shader\n\n          attribute vec3 positions;\n          attribute vec3 positions64Low;\n          attribute float elevations;\n          attribute vec4 fillColors;\n          attribute vec3 pickingColors;\n\n          uniform vec2 gradient;\n\n          ".concat(main, "\n\n          void calculatePosition(PolygonProps props) {\n            vec3 pos;\n            vec3 pos64Low;\n            vec4 colors = props.fillColors;\n          \n            geometry.worldPosition = props.positions;\n            geometry.worldPositionAlt = props.nextPositions;\n            geometry.pickingColor = props.pickingColors;\n          \n            pos = props.positions;\n            pos64Low = props.positions64Low;\n            isValid = 1.0;\n          \n            pos.z = props.elevations * elevationScale;\n\n            gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);\n            DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n            vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, vec3(0.0, 0.0, 1.0));\n            vColor = vec4(lightColor.rgb, opacity);\n            DECKGL_FILTER_COLOR(vColor, geometry);\n          }\n\n          void main(void) {\n            PolygonProps props;\n\n            props.positions = positions;\n            props.positions64Low = positions64Low;\n            props.elevations = elevations;\n            props.fillColors = fillColors;\n            props.pickingColors = pickingColors;\n\n            calculatePosition(props);\n          }");
};

export { getVertex as default };